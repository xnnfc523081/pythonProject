'全部遵循左闭右开原则'

# 1.列表的定义：
# 在Python中，列表是一种可变的序列类型，可以包含多个值或元素。列表元素被有序放在中括号内，用逗号进行分割
# 列表中的元素可以是不同的数据类型，包括数字、字符串、甚至其他列表。列表使用方括号[]定义，并且元素之间用逗号,分隔。
# 语法格式 : 变量名 = [元素1，元素2，.......]

# 定义一个列表   注意：列表内的元素数据类型不受限制,可以是数据类型，数字，字符串，列表，元素，字典，集合等
li = [1,2,3]
print(li,type(li))

# 从右往左索引
print(li[-1])

# 从左往右索引
print(li[1])

# 切片操作
print(li[1:3])

# 2.遍历列表
# 使用for循环遍历列表（从列表中取出元素）
li = [1,2,3,4]
for i in li:
    print(i)

# 3.列表常见操作

'1.添加元素'

# (1) append(object)方法
# 语法格式：list.append(object)
# object: 要添加到列表末尾的元素,可以是任意数据类型

li = [1,2,3,4]
# 添加整型数据
li.append(1)
# 添加字符串类型的数据
li.append("abcd")
print(li)
# 添加列表
li.append([1,2,3,4,"apple""org"])
#  打印结果为'1,2,3,4,appleorg'
#  因为apple和org之间没逗号分隔，运算时进行了隐式字符串字面值拼接
#  就相当于"apple""org"等于"appleorg"
print(li)

# (2) extend(iterable)方法
# 语法格式：list.extend(iterable)
# 将可迭代对象中的所有元素逐一添加到列表的末尾
# 可迭代对象：字符串，元组，列表，字典，集合   参考文献：https://choupangxia.com/2024/10/08/python-iter/
li = [1,2,3]
li.extend("abcd")
print(li)

# (3) insert(index,object)方法
# 语法格式：list.insert(index,object)
# list：元素将要被插入的索引位置
# object：要插入到列表中的元素，可以是任意数据类型

li = [1,2,3]
li.insert(1,"hello")
print(li)
# 当要插入的位置的索引超过最后列表最后的索引，那么会将插入元素添加到列表后面

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

'2.修改语句'

# 语法格式：list[index] = value
# index:要修改元素的索引位置
# value:要赋值给索引位置的新值,可以是任意数据类型

li = [1,2,3,4]
li[3] = "abc"
print(li)


#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

'3.检查元素'

# (1) in 运算符
# 检查一个元素是否存在于列表中，如果存在返回Ture，否则返回False
# 语法格式：in list

name = ["sy","lr,cyw,wyx"]
# 检查元素存在
print("sy" in name)


# (2) not in 运算符
# 检查一个元素是否存在于列表中，如果存在返回False，否则返回Ture
# 语法格式：not in list

name = ["a","b","c","d"]
# 检查元素不存在
print("e" not in name)


# (3) index(value,start,stop)方法
# 查找列表中某个元素第一次出现的索引,如果元素不存在则抛出ValueError异常
# 语法格式：list.index(value ,start=0 ,stop=len(list))
# value:要查找的元素的数值
# start（可选）：开始查找的索引，默认为0，即列表开头
# stop(可选)：停止查找的索引，即列表的结尾

li = [1,2,3,4]
print(li.index(1,0,3))


# (4) count(value)方法
# 统计某个元素在列表中出现的次数，如果元素在列表中不存在,则返回0
# 语法格式:list.count(value)
# value:要统计出现次数的元素

num = [1,2,3,4,5,6,6,6,]
print(num.count(6))

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

'删除元素'

# (1) del语法
# 根据索引删除列表中的元素，如果尝试删除一个不存在的元素，则会抛出IndexError异常
# 语法格式：del list[index]

li = [1,2,3,4,5]
# 删除下标存在的元素
del li[1]
print(li)
# 删除下标不存在的元素
#del li[6]
#print(li)

# (2) remove(value)方法
# 移除列表中第一个匹配值的元素,如果列表不存在该元素，则抛出ValueError异常
# 语法格式：list.remove(value)
# value:要从列表中移除的元素的值

li = [1,2,4,5]
# 移除存在的元素
li.remove(1)
print(li)
# 移除不存在的元素
#li.remove(3)
#print(li)

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

'排序元素'

# (1) sort(key,reverse)方法
# key (可选)：接收一个函数作为参数。该函数会在每个元素上调用，其返回值将作为排序的依据。如果未提供，则直接比较元素本身。
# reverse (可选)：接收一个布尔值。如果设置为 True，则列表将以降序排列；如果设置为 False 或未提供，则列表将以升序排列。
# 语法格式：list.sort(key = None,reverse = False)

li = [1,4,3,5,6,2]
li.sort(key=None,reverse=False)
print(li)

li.sort(key=None,reverse=True)
print(li)

# (2) reverse
# 反转元素中的列表顺序
# 语法格式：list.reverse

li = [1,2,3,4,5]
li.reverse()
print(li)


#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

'cope复制方法'
str = [11,22,55,33,0]
print(str)
str_1 = str.copy()
print(str_1)


#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#  （1）基本列表推导式
# expression ：表达式，用于生成列表中的新元素。
# item ： iterable 中的当前元素。
# iterable ：可迭代对象，如列表、元组、字符串、集合等。
# 语法格式：expression for item in iterable

# 1.生成一个列表保存1-10

# 方法一:
li_1 = []
for i in range(1,11):
    li_1.append(i)
print(li_1)

# 方法二:          使用列表推导式
li_2 = [i for i in range(1,11)]
print(li_2)

# 2.生成一个列表保存列表[11，22，33，44，55，66]中所有元素乘以5的结果

# 方法一:
num_1 = []
li = [11,22,33,44,55,66]
for i in li:
    num_1.append(i * 5)
print(num_1)

# 方法二:
num_2 = [i * 5 for i in li]
print(num_2)


# （2）带条件的列表推导式
# expression for item in iterable if condition
# condition ：布尔表达式，用于指定哪些元素应该被包含在结果列表中。

# 1.生成一个列表，保存列表 [11, 22, 33, 44, 55, 66] 中的所有偶数

# 方法一:
li = [11,22,33,44,55,66]
li_1 = []
for i in li:
    if i % 2 == 0:
        print(i)
        li_1.append(i)
print(li_1)

# 方法二:
li_3 = [i for i in  li if i % 2 == 0]  #使用列表推导式
print(li_3)


#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  列表的嵌套
# 定义一个嵌套列表
li = [1,3,4,[12,13,14]]
# 访问嵌套里列表
print(li[3])
# 访问嵌套列表内的第一个元素
print(li[3][0])
# 访问嵌套列表内的第二个元素
print(li[3][1])

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————-———————

# 技巧:
# (1)修改(列表元素数值，顺序等)类的函数，需要先调用函数修改然后使用print方法打印
# (2)查询（不改变列表及其顺序等）类的函数，可以直接打印来调用函数
# (3)函数的参数记忆方法:位置相关用索引，内容相关用Value
# (4)列表方法只能用于可变对象
# 列表像黏土 - 可以捏来捏去（修改）
# 字符串像石头 - 只能换新的，不能改旧的
# Python 中的不可变对象：
# 字符串 (str)
# 整数 (int)
# 浮点数 (float)
# 元组 (tuple)
# 布尔值 (bool)
# Python 中的可变对象：
# 列表 (list)
# 字典 (dict)
# 集合 (set)

# ======================== 添加元素方法 ========================

# append(object)
# 功能: 在列表末尾添加单个元素
# 语法: li.append(元素)

# extend(iterable)
# 功能: 在列表末尾添加可迭代对象中的所有元素
# 语法: li.extend(可迭代对象)

# insert(index, object)
# 功能: 在指定位置插入元素
# 语法: li.insert(索引, 元素)


# ======================== 修改元素方法 ========================

# 直接赋值
# 功能: 修改指定位置的元素
# 语法: li[索引] = 新值


# ======================== 检查元素方法 ========================

# in
# 功能: 检查元素是否存在于列表中
# 语法: 元素 in li
# 返回: 存在返回 True，否则返回 False

# not in
# 功能: 检查元素是否不存在于列表中
# 语法: 元素 not in li
# 返回: 不存在返回 True，否则返回 False

# index(value, start, stop)
# 功能: 查找元素第一次出现的索引
# 语法: li.index(值, 开始索引, 结束索引)
# 返回: 找到返回索引，找不到抛出 ValueError

# count(value)
# 功能: 统计元素在列表中出现的次数
# 语法: li.count(值)
# 返回: 返回出现次数，找不到返回 0


# ======================== 删除元素方法 ========================

# del
# 功能: 根据索引删除元素
# 语法: del li[索引]
# 注意: 索引不存在会抛出 IndexError

# remove(value)
# 功能: 移除第一个匹配值的元素
# 语法: li.remove(值)
# 注意: 值不存在会抛出 ValueError


# ======================== 排序元素方法 ========================

# sort(key, reverse)
# 功能: 对列表进行排序
# 语法: li.sort(key=None, reverse=False)
# 参数: reverse=True 降序，reverse=False 升序

# reverse()
# 功能: 反转列表元素的顺序
# 语法: li.reverse()


# ======================== 列表推导式 ========================

# 基本推导式
# 语法: [表达式 for item in 可迭代对象]
# 示例: [i for i in range(1, 11)]

# 带条件推导式
# 语法: [表达式 for item in 可迭代对象 if 条件]
# 示例: [i for i in li if i % 2 == 0]


# ======================== 列表嵌套操作 ========================

# 访问嵌套列表
# 语法: li[外层索引]

# 访问嵌套元素
# 语法: li[外层索引][内层索引]


