'全部遵循左闭右开原则'
'字符串的方法是直接返回新数值，不对字符串本身修改，字符串为不可变对象'

#  1.查找元素

# sub : 搜索的子字符串
# start（可选） : 开始搜索的位置。可以省略，如果省略，则从字符串开头查找
# end（可选） : 结束搜索的位置，可以省略，字符串的查找会在这个之前停止（开区间），如果省略，则会一直查找到字符串的末尾

a = "ningning"
# （1）find方法
#  查找子字符串在字符串内首次出现的位置，找到返回字符串的索引，没有找到返回-1

# 查找一个子字符串
print(a.find("n"))

# 查找多个字符串
print(a.find("ing"))     #返回的索引位置是第一个字符串所在的位置

# 使用start和end参数
print(a.find("i",0,6))

# （2）index方法
print(a.index("i",0,2))    #找到了则会返回索引位置，找不到则抛出 ValueError异常

'区别：str.find()如果找不到子字符串，返回 -1不会抛出异常,str.index()如果找不到子字符串，抛出 ValueError 异常'

# （3）count方法    统计字符串出现次数
print(a.count("i",0,7))   #找到了返回出现次数。没找到返回0

#————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#  2.修改元素

# （1）replace方法   replace（old,new,count）

# old : 需要被替换掉的子字符串
# new ； 用于替换old的新字符串
# count（可选） :指定替换的最大次数，省略此参数或值小于0，将替换进行到底，替换所有匹配的字符串，指定了count的值，只替换count次出现的old

str = "hello,world,hello,bingbing"

# 指定old.new.count
print(str.replace("hello","hi",1))

# （2）split方法      split（sep,maxsplit）

# 将字符串分割为列表中的子字符串，默认情况下根据任何空白字符（空格，换行\n,制表符\t等）来分割字符串，也可以指定一个分隔符来改变分割行为
# sep : 分隔符，默认为None，如果指定其他字符串为分隔符，则会在指定的分隔符处分割字符串
# maxsplit（可选）: 指定分割的最大次数，默认为-1，表示分割次数没有限制，分割所有可能的子字符串，如果指定非负整数n，则字符串只会被分割n次，
# 并生成一个包含n+1个元素的列表

str = "hello world ,hello bing"

# 使用默认分隔符
print(str.split())

# 使用sep参数[,]指定分隔符
print(str.split(","))

# 指定一个不存在的分隔符，则不会分割，而是将整个字符串作为整体返回
print(str.split("%"))

# 使用sep和maxsplit
print(str.split(maxsplit=1))

# （3）strip方法       strip（[chars]）
# 去除字符串首尾的指定字符（默认情况下去除空白字符，包括空格，\n换行符,\t制表符）
# chars (可选): 要从字符串开头和末尾去除的字符集合。如果未指定，将去除所有空白字符。chars 的参数是一个字符串，
# 包含要从原字符串中去除的字符。strip 方法会去除字符串开头和末尾出现的 chars 中的任意字符，直到遇到不在 chars 中的字符为止。

str = "   hello,world   "
# 使用默认参数（去除空白字符）
print(str.strip())

str = "xxxhello,worldxxx"
# 指定字符去除
print(str.strip("xxx"))

str = "zyxhello,worldyyzzxx"
# 去除首尾多个指定字符
print(str.strip("xyz"))

# （4）lower
# 将字符串中的所有大写字母转为小写字母    没有大写字母则保持原样    非字母字符不受影响

str = "HELLO,WORLD"
print(str.lower())


# （5）upper
# 将字符串中的小写字母转换为大写字母     没有小写字母则保持原样    非字母字符不受影响

str = "hello,world"
print(str.upper())


#————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#  3.判断元素

# （1）startswith(prefix, start, end)
# 检查字符串是否以指定的前缀开始。如果字符串以指定的前缀开始，则返回 True；否则返回 False。
# prefix：要检查的前缀。
# start (可选)：开始检查的位置。如果省略，则从字符串的开头开始检查。
# end (可选)：结束检查的位置。字符串的检查会在这个位置之前停止。如果省略，则检查会一直进行到字符串的末尾。

str = "hello,world"
print(str.startswith("h",0,11))

# （2）endswith(suffix, start, end)
# 检查字符串是否以指定的后缀结束。如果字符串以指定的后缀结束，则返回 True；否则返回 False。
# suffix：要检查的后缀。
# start (可选)：开始检查的位置。如果省略，则从字符串的开头开始检查。
# end (可选)：结束检查的位置。字符串的检查会在这个位置之前停止。如果省略，则检查会一直进行到字符串的末尾。

str = "hello,world"
print(str.endswith("ld",0,11))

# （3） isupper()
# 检查字符串中的所有可识别的字母字符是否都是大写。如果字符串中至少有一个可识别的字母字符，
# 并且所有这些字母字符都是大写，则返回 True。如果字符串为空、不包含任何字母字符，或者包含至少一个小写字母字符，则返回 False

str = "PYTHON"
# 全部都是大写
print(str.isupper())

str = ("PyThOn")
# 有大写有小写
print(str.isupper())

str = "PYTHON, 3.01"
# 包含空格与数字，但所有字母都是大写
print(str.isupper())

str = "123"
# 只有数字
print(str.isupper())

# （4） islower()
# 检查字符串中的所有可识别的字母字符是否都是小写。如果字符串中至少有一个可识别的字母字符，
# 并且所有这些字母字符都是小写，则返回 True。如果字符串为空、不包含任何字母字符，或者包含至少一个大写字母字符，则返回 False。

str = "python"
# 全部都是小写
print(str.islower())

str = ("PyThOn")
# 有大写有小写
print(str.islower())

str = "python, 3.01"
# 包含空格与数字，但所有字母都是大写
print(str.islower())

str = "123"
# 只有数字
print(str.islower())


#  4.链式调用
# 一次性完成多个操作
result = "  Hello, World!  ".strip().lower().replace("world", "Python")
print(result)  # "hello, python!"
# 每个方法都返回有效对象（不是 None）
# 返回类型与下一个方法匹配
# 考虑执行顺序对结果的影响
# 保持代码可读性，避免过长链式


#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


# ======================== 查找元素类方法 ========================

# find(sub, start, end)
# 功能: 查找子字符串在字符串中首次出现的位置
# 参数:
#   sub   : 要查找的子字符串
#   start : 开始搜索的位置(可选)
#   end   : 结束搜索的位置(可选)
# 返回: 找到返回索引，找不到返回 -1

# index(sub, start, end)
# 功能: 查找子字符串在字符串中首次出现的位置
# 参数: 同 find 方法
# 返回: 找到返回索引，找不到抛出 ValueError 异常

# count(sub, start, end)
# 功能: 统计子字符串在字符串中出现的次数
# 参数: 同 find 方法
# 返回: 返回出现次数，找不到返回 0


# ======================== 修改元素类方法 ========================

# replace(old, new, count)
# 功能: 替换字符串中的子字符串
# 参数:
#   old   : 需要被替换的子字符串
#   new   : 用于替换的新字符串
#   count : 最大替换次数(可选)
# 返回: 返回替换后的新字符串

# split(sep, maxsplit)
# 功能: 将字符串分割成列表
# 参数:
#   sep       : 分隔符，默认为空白字符(可选)
#   maxsplit  : 最大分割次数(可选)
# 返回: 返回分割后的字符串列表

# strip(chars)
# 功能: 去除字符串首尾的指定字符
# 参数:
# chars : 要去除的字符集合，默认为空白字符(可选)
# 返回: 返回处理后的字符串

# lower()
# 功能: 将字符串中所有大写字母转为小写
# 参数: 无
# 返回: 返回小写字符串

# upper()
# 功能: 将字符串中所有小写字母转为大写
# 参数: 无
# 返回: 返回大写字符串


# ======================== 判断元素类方法 ========================

# startswith(prefix, start, end)
# 功能: 检查字符串是否以指定前缀开头
# 参数:
#   prefix : 要检查的前缀
#   start  : 开始检查的位置(可选)
#   end    : 结束检查的位置(可选)
# 返回: 符合返回 True，否则返回 False

# endswith(suffix, start, end)
# 功能: 检查字符串是否以指定后缀结尾
# 参数:
#   suffix : 要检查的后缀
#   start  : 开始检查的位置(可选)
#   end    : 结束检查的位置(可选)
# 返回: 符合返回 True，否则返回 False

# isupper()
# 功能: 检查字符串中所有字母是否均为大写
# 参数: 无
# 返回: 全部大写返回 True，否则返回 False

# islower()
# 功能: 检查字符串中所有字母是否均为小写
# 参数: 无
# 返回: 全部小写返回 True，否则返回 False





